stages:
  - build
  - test
  - analyze

docker-build:
  # Use the official docker image.
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
    
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile


build:
  stage: build
  script:
    - cd "REST API"
    - ./gradlew build -x test --stacktrace
    - ./gradlew.bat --stop

tests:
  stage: test
  script:
    - cd "REST API"
    - ./gradlew test
    - ./gradlew.bat --stop

sonarqube-check:
  stage: analyze
  image: gradle:jre11-slim
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - cd "REST API"
    - ./gradlew sonarqube
    - ./gradlew.bat --stop
  allow_failure: true
  only:
    - main # or the name of your main branch

